name: Build and Deploy a new version

on:
  push:
    branches: [ master ]

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
      - name: Check changed files
        id: check
        run: |
          BUILD_FILES_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E '^(frontend/|backend/|Dockerfile|VERSION)')
          DEPLOY_FILES_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E '^(ansible/|frontend/|backend/|Dockerfile|VERSION)')
          
          if [ -n "$BUILD_FILES_CHANGED" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

          if [ -n "$DEPLOY_FILES_CHANGED" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  read_version:
    needs: check_changes
    if: needs.check_changes.outputs.should_build == 'true' || needs.check_changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Read version
        id: set_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

  build_and_push:
    needs: [check_changes, read_version]
    if: needs.check_changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          stage: server
          tags: |
            l1ghth4t/immunity:${{ needs.read_version.outputs.version }}
            l1ghth4t/immunity:latest
          push: true

  build_and_push_worker:
    needs: [check_changes, read_version]
    if: needs.check_changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          stage: worker
          tags: |
            l1ghth4t/immunity-worker:${{ needs.read_version.outputs.version }}
            l1ghth4t/immunity-worker:latest
          push: true

  deploy_staging:
    needs: [check_changes, build_and_push, build_and_push_worker]
    if: needs.check_changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_STAGING }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create dynamic inventory
        run: |
          cat > inventory.ini <<EOF
          [web]
          ${{ secrets.SERVER_IP }}

          [web:vars]
          ansible_user=${{ secrets.SSH_USER }}
          ansible_ssh_private_key_file=~/.ssh/id_rsa
          app_user=${{ secrets.SSH_USER }}
          postgres_user=${{ secrets.DB_USER }}
          postgres_password=${{ secrets.DB_PASSWORD }}
          EOF

      - name: Test inventory
        run: |
          ansible-inventory -i inventory.ini --list

      - name: Run playbook
        run: |
          ansible-playbook -i inventory.ini ansible/deploy.yml
