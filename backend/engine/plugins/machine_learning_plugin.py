"""
Плагин для детектирования уязвимостей методами ML.
"""

import re
import ast
from typing import Any, Dict, List
import subprocess
import requests
import base64
from engine.plugins.base import BasePlugin

import logging
logger = logging.getLogger(__name__)


class MLPlugin(BasePlugin):
    """
    Плагин для обнаружения уязвимостей с помощью модели машинного обучения.
    """

    name = "machine_learning_plugin"
    description = "Ищет уязвимости в контексте выполнения запроса с помощью модели машинного обучения."

    def run(self, context_id: int, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Команда для запуска плагина.
        :param context_id: Идентификатор контекста.
        :param data: Данные контекста, преобразованные в словарь.
        :return: Список уязвимостей.
        """
        try:
            vulnerabilities = []
            logger.info("Запуск ML-модели для анализа контекста %s", str(context_id))

            encoded_data = base64.b64encode(str(data).encode('utf-8'))
            base64_data = encoded_data.decode('utf-8')

            vuln_types = {
                "CWE-352": "Подделка межсайтовых запросов",
                "CWE-639": "Небезопасная прямая ссылка на объект",
                "CWE-77": "Выполнение команд",
                "CWE-79": "Межсайтовый скриптинг",
                "CWE-89": "SQL-инъекция",
                "CWE-16": "Уязвимости, связанные с конфигурацией",
                "CWE-502": "Десериализация недоверенных данных",
                "CWE-400": "Неуправляемое потребление ресурсов",
                "CWE-918": "Подделка серверных запросов"
            }

            vuln_descriptions = {
                "CWE-352": "Уязвимость позволяет злоумышленнику выполнять нежелательные действия от имени авторизованного пользователя без его ведома. Например, злоумышленник может заставить пользователя отправить форму или изменить настройки аккаунта через специально созданный запрос.",
                "CWE-639": "Уязвимость возникает, когда приложение предоставляет прямой доступ к ресурсам (например, файлам или базам данных), основываясь на пользовательском вводе, что позволяет злоумышленникам получить несанкционированный доступ к данным.",
                "CWE-77": "Уязвимость заключается в том, что приложение выполняет команды операционной системы на основе неконтролируемого пользователем ввода. Это может позволить злоумышленнику выполнить произвольные команды на сервере.",
                "CWE-79": "Уязвимость позволяет внедрить вредоносный код (обычно JavaScript) в веб-страницу, который будет выполнен в браузере пользователя. Это может привести к краже данных, изменению содержимого страницы или выполнению других действий от лица жертвы.",
                "CWE-89": "Уязвимость, при которой злоумышленник может внедрять SQL-запросы в базу данных приложения через входные данные. Это может дать возможность злоумышленнику читать, изменять или удалять данные в базе данных.",
                "CWE-16": "Проблемы безопасности, вызванные неправильной настройкой системы или приложения.",
                "CWE-502": "Уязвимость связана с десериализацией объектов, полученных из ненадежного источника. Она может позволить злоумышленнику выполнить произвольный код на сервере или манипулировать данными.",
                "CWE-400": "Уязвимость возникает, когда приложение не ограничивает использование системных ресурсов (память, процессор, сеть). Это может привести к отказу в обслуживании (DoS) или замедлению работы системы.",
                "CWE-918": "Уязвимость позволяет злоумышленнику отправлять запросы от сервера приложения к другим серверам или внутренним сервисам. Это может использоваться для обхода сетевых ограничений и получения доступа к закрытым ресурсам."
            }

            result = subprocess.run(['python3', 'engine/infer_context_script.py', base64_data], capture_output=True, text=True)
            output = result.stdout.strip()
            if output:
                if output != "Clean":
                    logger.info("Контекст %s содержит уязвимость %s", str(context_id), output)
                    vulnerabilities.append(
                        {
                            # "context_id": context_id,
                            "type": vuln_types[output],
                            "cwe": output,
                            "description": vuln_descriptions[output],
                            "evidence": "",
                        }
                    )
            else:
                logger.error(result.stderr.strip())

            logger.info("Завершена ML-обработка для анализа контекста %s", str(context_id))

            return vulnerabilities
        except Exception as e:
            print(e)
